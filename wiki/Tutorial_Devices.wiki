=Tutorial : Using devices=
==Programmable Heater with TMP102 and MCP23017==
WebIOPi include several drivers to directly control over 30 electronic devices. It provides a consistent and common abstraction for most used sensors, analog converters, and GPIO expanders. See the [DEVICES supported devices] pages for a complete listing.

All supported devices can be used in your Python script, from the REST API, the Javascript library, or even from the [PYTHONCLIENT Python] or [JAVACLIENT Java] Client. Function provided depend on the devices type. Devices can support one or multiples interfaces. Interfaces are grouped in 3 packages :

  * [DIGITAL Digital]
    * GPIOPort (I/O Expanders)
  * [ANALOG Analog]
    * ADC (Analog to Digital Converter, ie. analog inputs)
    * DAC (Digital to Analog Converter, ie. analog outputs)
    * PWM (Pulse Width Modulation outputs)
  * [SENSOR Sensor]
    * Temperature
    * Pressure
    * Luminosity
    * Distance

==Testing Devices==
Before using devices in your Pythons script or custom UI, you may need to debug your circuitry and at least, verify it works well with the WebIOPi environment. You don't need to write any line of code to test your devices, thanks to the WebIOPi configuration file.

Edit */etc/webiopi/config*.

Assume we have a [TMP102] I2C Temperature sensor, simply add following line in the *`[DEVICES]`* section to register it with the name *tmp*. This name will be used to identify the sensor in the whole system.
{{{
[DEVICES]
tmp = TMP102
}}}

Assume we also have a [MCP230xx MCP23017] I2C GPIO Expander, then we can also add the optional I2C slave address.
{{{
[DEVICES]
tmp = TMP102
mcp = MCP23017 slave:0x20
}}}

Ensure you don't have any *doc-root* directive in the *`[HTTP]`* section to use defaults web apps, save, and restart webiopi to use the device monitor (http://raspberrypi:8000/app/devices-monitor/).

<p align="center">http://trouch.com/wp-content/uploads/2014/01/webiopi-tutorials-device-test.png</p>

==Devices in Python scripts with REST mapping==
When devices are named in the configuration file, drivers are automatically called to initialize the device and mapped to the REST API. We need to use the *webiopi.deviceInstance(name)* function in the Python script to retrieve the device object instance for the given name. Then we can use functions of the drivers, depending of interfaces supported. You will find a link to all interfaces supported with a complete function list on the top of each device wiki pages. See [TMP102] and [MCP230xx] for instance.

The following example automatically turns on/off the heater, plugged on a GPIO expander, depending on the temperature given by a the sensor.
{{{
import webiopi
GPIO = webiopi.GPIO # Helper for LOW/HIGH values
HEATER = 0 # Heater plugged on the Expander Pin 0
MIN = 20 # Minimum temperature in celsius
MAX = 22 # Maximum temperature in celsius

# setup function is automatically called at WebIOPi startup
def setup():
    mcp = webiopi.deviceInstance("mcp") # retrieve the device named "mcp" in the configuration 
    mcp.setFunction(HEATER, GPIO.OUT)

# loop function is repeatedly called by WebIOPi 
def loop():
    tmp = webiopi.deviceInstance("tmp") # retrieve the device named "tmp" in the configuration
    mcp = webiopi.deviceInstance("mcp") # retrieve the device named "mcp" in the configuration 
    celsius = tmp.getCelsius() # retrieve current temperature

    # Turn ON heater when passing below the minimum temperature
    if (celsius < MIN):
        mcp.digitalWrite(HEATER, GPIO.HIGH)

    # Turn OFF heater when reaching maximum temperature
    if (celsius >= MAX):
        mcp.digitalWrite(HEATER, GPIO.LOW)

    # gives CPU some time before looping again
    webiopi.sleep(1)

# destroy function is called at WebIOPi shutdown
def destroy():
    mcp = webiopi.deviceInstance("mcp") # retrieve the device named "mcp" in the configuration 
    mcp.digitalWrite(HEATER, GPIO.LOW) # turn off to avoid over heating
}}}

==Devices in Python scripts without REST mapping==
If you don't need or don't want your devices to be bound to the REST API, you can avoid setting them in the configuration file and initialize the driver by yourself. You will just need to import the driver from the correct package. You can also use the whole library in your own Python script, without the WebIOPi HTTP server.

For instance, with our TMP102 and MCP23017 :
{{{
import webiopi

# load drivers
from webiopi.devices.sensor import TMP102
from webiopi.devices.digital import MCP23017

GPIO = webiopi.GPIO # Helper for LOW/HIGH values
HEATER = 0 # Heater plugged on the Expander Pin 0
MIN = 20 # Minimum temperature in celsius
MAX = 22 # Maximum temperature in celsius

# initialize drivers
tmp = TMP102()
mcp = MCP23017(slave=0x20)

# setup function is automatically called at WebIOPi startup
def setup():
    mcp.setFunction(HEATER, GPIO.OUT)

# loop function is repeatedly called by WebIOPi 
def loop():
    celsius = tmp.getCelsius() # retrieve current temperature

    # Turn ON heater when passing below the minimum temperature
    if (celsius < MIN):
        mcp.digitalWrite(HEATER, GPIO.HIGH)

    # Turn OFF heater when reaching maximum temperature
    if (celsius >= MAX):
        mcp.digitalWrite(HEATER, GPIO.LOW)

    # gives CPU some time before looping again
    webiopi.sleep(1)

# destroy function is called at WebIOPi shutdown
def destroy():
    mcp.digitalWrite(HEATER, GPIO.LOW) # turn off to avoid over heating
}}}

==Javascript Library==
If you set the device in the configuration file, all functions from the driver are bound to the REST API. Most of them are also available directly in the Javascript library. Simply pass the configured name for the device to the Javascript constructor.
{{{
(missing example)
}}}